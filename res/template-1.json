{
  "v": "5.7.6",
  "fr": 30,
  "ip": 0,
  "op": 314,
  "w": 1920,
  "h": 1080,
  "nm": "Comp 1",
  "ddd": 1,
  "assets": [
    {
      "id": "comp_0",
      "layers": [
        {
          "ddd": 0,
          "ind": 1,
          "ty": 4,
          "nm": "Shape Layer 3",
          "sr": 1,
          "ks": {
            "o": {
              "a": 1,
              "k": [
                {
                  "i": { "x": [0.833], "y": [0.833] },
                  "o": { "x": [0.167], "y": [0.167] },
                  "t": 0,
                  "s": [0]
                },
                { "t": 5, "s": [100] }
              ],
              "ix": 11,
              "x": "var $bm_rt;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    if (n > 1 && n < numKeys - 1) {\n        return null;\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1.time;\n    eX = $bm_sub(key2.time, key1.time);\n    if (time < key1.time || time > key2.time) {\n        return null;\n    } else {\n        return valueAtTime(easeandwizz_outExpo(t, sX, eX, d));\n    }\n}\n$bm_rt = easeAndWizz() || value;"
            },
            "r": { "a": 0, "k": 0, "ix": 10 },
            "p": { "a": 0, "k": [954.75, 534.75, 0], "ix": 2, "l": 2 },
            "a": { "a": 0, "k": [0, 0, 0], "ix": 1, "l": 2 },
            "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
          },
          "ao": 0,
          "shapes": [
            {
              "ty": "gr",
              "it": [
                {
                  "d": 1,
                  "ty": "el",
                  "s": { "a": 0, "k": [11.5, 11.5], "ix": 2 },
                  "p": { "a": 0, "k": [0, 0], "ix": 3 },
                  "nm": "Ellipse Path 1",
                  "mn": "ADBE Vector Shape - Ellipse",
                  "hd": false
                },
                {
                  "ty": "st",
                  "c": { "a": 0, "k": [1, 1, 1, 1], "ix": 3 },
                  "o": { "a": 0, "k": 100, "ix": 4 },
                  "w": {
                    "a": 1,
                    "k": [
                      {
                        "i": { "x": [0.833], "y": [0.833] },
                        "o": { "x": [0.167], "y": [0.167] },
                        "t": 0,
                        "s": [4]
                      },
                      { "t": 5, "s": [0] }
                    ],
                    "ix": 5,
                    "x": "var $bm_rt;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    if (n > 1 && n < numKeys - 1) {\n        return null;\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1.time;\n    eX = $bm_sub(key2.time, key1.time);\n    if (time < key1.time || time > key2.time) {\n        return null;\n    } else {\n        return valueAtTime(easeandwizz_outExpo(t, sX, eX, d));\n    }\n}\n$bm_rt = easeAndWizz() || value;"
                  },
                  "lc": 1,
                  "lj": 1,
                  "ml": 4,
                  "bm": 0,
                  "nm": "Stroke 1",
                  "mn": "ADBE Vector Graphic - Stroke",
                  "hd": false
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [-135.75, -149.75], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": {
                    "a": 1,
                    "k": [
                      {
                        "i": { "x": [0.833, 0.833], "y": [0.833, 0.833] },
                        "o": { "x": [0.167, 0.167], "y": [0.167, 0.167] },
                        "t": 0,
                        "s": [34, 34]
                      },
                      { "t": 5, "s": [502, 502] }
                    ],
                    "ix": 3,
                    "x": "var $bm_rt;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    if (n > 1 && n < numKeys - 1) {\n        return null;\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1.time;\n    eX = $bm_sub(key2.time, key1.time);\n    if (time < key1.time || time > key2.time) {\n        return null;\n    } else {\n        return valueAtTime(easeandwizz_outExpo(t, sX, eX, d));\n    }\n}\n$bm_rt = easeAndWizz() || value;"
                  },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Ellipse 1",
              "np": 3,
              "cix": 2,
              "bm": 0,
              "ix": 1,
              "mn": "ADBE Vector Group",
              "hd": false
            }
          ],
          "ip": 0,
          "op": 6,
          "st": -43,
          "bm": 0
        },
        {
          "ddd": 0,
          "ind": 2,
          "ty": 4,
          "nm": "Shape Layer 2",
          "sr": 1,
          "ks": {
            "o": { "a": 0, "k": 100, "ix": 11 },
            "r": { "a": 0, "k": 0, "ix": 10 },
            "p": { "a": 0, "k": [960, 540, 0], "ix": 2, "l": 2 },
            "a": { "a": 0, "k": [0, 0, 0], "ix": 1, "l": 2 },
            "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
          },
          "ao": 0,
          "shapes": [
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 1,
                    "k": [
                      {
                        "i": { "x": 0.833, "y": 0.833 },
                        "o": { "x": 0.167, "y": 0.167 },
                        "t": 3,
                        "s": [
                          {
                            "i": [
                              [0, 0],
                              [0, 0]
                            ],
                            "o": [
                              [0, 0],
                              [0, 0]
                            ],
                            "v": [
                              [-141, -155],
                              [-71, -155]
                            ],
                            "c": false
                          }
                        ]
                      },
                      {
                        "t": 6,
                        "s": [
                          {
                            "i": [
                              [0, 0],
                              [0, 0]
                            ],
                            "o": [
                              [0, 0],
                              [0, 0]
                            ],
                            "v": [
                              [-71, -155],
                              [-71, -155]
                            ],
                            "c": false
                          }
                        ]
                      }
                    ],
                    "ix": 2,
                    "x": "var $bm_rt;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    if (n > 1 && n < numKeys - 1) {\n        return null;\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1.time;\n    eX = $bm_sub(key2.time, key1.time);\n    if (time < key1.time || time > key2.time) {\n        return null;\n    } else {\n        return valueAtTime(easeandwizz_outExpo(t, sX, eX, d));\n    }\n}\n$bm_rt = easeAndWizz() || value;"
                  },
                  "nm": "Path 1",
                  "mn": "ADBE Vector Shape - Group",
                  "hd": false
                },
                {
                  "ty": "st",
                  "c": { "a": 0, "k": [1, 1, 1, 1], "ix": 3 },
                  "o": { "a": 0, "k": 100, "ix": 4 },
                  "w": { "a": 0, "k": 4, "ix": 5 },
                  "lc": 2,
                  "lj": 1,
                  "ml": 4,
                  "bm": 0,
                  "nm": "Stroke 1",
                  "mn": "ADBE Vector Graphic - Stroke",
                  "hd": false
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Shape 1",
              "np": 3,
              "cix": 2,
              "bm": 0,
              "ix": 1,
              "mn": "ADBE Vector Group",
              "hd": false
            }
          ],
          "ip": 3,
          "op": 7,
          "st": -40,
          "bm": 0
        },
        {
          "ddd": 0,
          "ind": 3,
          "ty": 4,
          "nm": "Shape Layer 1",
          "sr": 1,
          "ks": {
            "o": { "a": 0, "k": 100, "ix": 11 },
            "r": { "a": 0, "k": 0, "ix": 10 },
            "p": { "a": 0, "k": [960, 540, 0], "ix": 2, "l": 2 },
            "a": { "a": 0, "k": [0, 0, 0], "ix": 1, "l": 2 },
            "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
          },
          "ao": 0,
          "shapes": [
            {
              "ty": "gr",
              "it": [
                {
                  "ind": 0,
                  "ty": "sh",
                  "ix": 1,
                  "ks": {
                    "a": 1,
                    "k": [
                      {
                        "i": { "x": 0.833, "y": 0.833 },
                        "o": { "x": 0.167, "y": 0.167 },
                        "t": 0,
                        "s": [
                          {
                            "i": [
                              [0, 0],
                              [0, 0]
                            ],
                            "o": [
                              [0, 0],
                              [0, 0]
                            ],
                            "v": [
                              [-141, -155],
                              [-141, -155]
                            ],
                            "c": false
                          }
                        ]
                      },
                      {
                        "t": 3,
                        "s": [
                          {
                            "i": [
                              [0, 0],
                              [0, 0]
                            ],
                            "o": [
                              [0, 0],
                              [0, 0]
                            ],
                            "v": [
                              [-141, -155],
                              [-71, -155]
                            ],
                            "c": false
                          }
                        ]
                      }
                    ],
                    "ix": 2,
                    "x": "var $bm_rt;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    if (n > 1 && n < numKeys - 1) {\n        return null;\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1.time;\n    eX = $bm_sub(key2.time, key1.time);\n    if (time < key1.time || time > key2.time) {\n        return null;\n    } else {\n        return valueAtTime(easeandwizz_outExpo(t, sX, eX, d));\n    }\n}\n$bm_rt = easeAndWizz() || value;"
                  },
                  "nm": "Path 1",
                  "mn": "ADBE Vector Shape - Group",
                  "hd": false
                },
                {
                  "ty": "st",
                  "c": { "a": 0, "k": [1, 1, 1, 1], "ix": 3 },
                  "o": { "a": 0, "k": 100, "ix": 4 },
                  "w": { "a": 0, "k": 4, "ix": 5 },
                  "lc": 2,
                  "lj": 1,
                  "ml": 4,
                  "bm": 0,
                  "nm": "Stroke 1",
                  "mn": "ADBE Vector Graphic - Stroke",
                  "hd": false
                },
                {
                  "ty": "tr",
                  "p": { "a": 0, "k": [0, 0], "ix": 2 },
                  "a": { "a": 0, "k": [0, 0], "ix": 1 },
                  "s": { "a": 0, "k": [100, 100], "ix": 3 },
                  "r": { "a": 0, "k": 0, "ix": 6 },
                  "o": { "a": 0, "k": 100, "ix": 7 },
                  "sk": { "a": 0, "k": 0, "ix": 4 },
                  "sa": { "a": 0, "k": 0, "ix": 5 },
                  "nm": "Transform"
                }
              ],
              "nm": "Shape 1",
              "np": 3,
              "cix": 2,
              "bm": 0,
              "ix": 1,
              "mn": "ADBE Vector Group",
              "hd": false
            }
          ],
          "ip": 0,
          "op": 4,
          "st": -43,
          "bm": 0
        }
      ]
    }
  ],
  "fonts": {
    "list": [
      {
        "fName": "UniSansHeavyCAPS",
        "fFamily": "Uni Sans",
        "fStyle": "Heavy CAPS",
        "ascent": 70.7992553710938
      }
    ]
  },
  "layers": [
    {
      "ddd": 0,
      "ind": 1,
      "ty": 0,
      "nm": "spark_01",
      "refId": "comp_0",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [1312, 537, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "w": 1920,
      "h": 1080,
      "ip": 224,
      "op": 231,
      "st": 224,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 2,
      "ty": 0,
      "nm": "spark_01",
      "refId": "comp_0",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 180, "ix": 10 },
        "p": { "a": 0, "k": [140, 227, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "w": 1920,
      "h": 1080,
      "ip": 224,
      "op": 231,
      "st": 224,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 3,
      "ty": 5,
      "nm": "THE LAST SLIDE 2",
      "parent": 28,
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": {
          "a": 0,
          "k": 0,
          "ix": 9,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": { "a": 0, "k": [294.961, 482.5, 0], "ix": 2 },
        "a": { "a": 0, "k": [0, -81, 0], "ix": 1 },
        "s": { "a": 0, "k": [119.677, 119.677, 119.677], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 156,
                "f": "UniSansHeavyCAPS",
                "t": "THE LAST SLIDE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 187.2,
                "ls": 0,
                "fc": [0.914, 0.882, 0]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 276,
      "op": 314,
      "st": 64,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 4,
      "ty": 5,
      "nm": "AND FINALLY... 2",
      "parent": 28,
      "sr": 1,
      "ks": {
        "o": {
          "a": 0,
          "k": 100,
          "ix": 11,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": {
          "a": 0,
          "k": [294.961, 324.5, 0],
          "ix": 2,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outBounce(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_mul($bm_mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outBounce(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outBounce(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outBounce(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outBounce(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "a": { "a": 0, "k": [0, -81, 0], "ix": 1 },
        "s": { "a": 0, "k": [119.677, 119.677, 119.677], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "AND FINALLY...",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [1, 1, 1]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 276,
      "op": 314,
      "st": 66,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 5,
      "ty": 5,
      "nm": "THE LAST SLIDE",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 213,
              "s": [-104]
            },
            { "t": 253, "s": [0] }
          ],
          "ix": 9,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": { "a": 0, "k": [294.961, 482, 0], "ix": 2 },
        "a": { "a": 0, "k": [0, -81, 0], "ix": 1 },
        "s": { "a": 0, "k": [119.677, 119.677, 119.677], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 156,
                "f": "UniSansHeavyCAPS",
                "t": "THE LAST SLIDE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 187.2,
                "ls": 0,
                "fc": [0.914, 0.882, 0]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 211,
      "op": 277,
      "st": 20,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 6,
      "ty": 5,
      "nm": "AND FINALLY...",
      "sr": 1,
      "ks": {
        "o": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 215,
              "s": [0]
            },
            { "t": 239, "s": [100] }
          ],
          "ix": 11,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": {
          "a": 1,
          "k": [
            {
              "i": { "x": 0.833, "y": 0.833 },
              "o": { "x": 0.167, "y": 0.167 },
              "t": 215,
              "s": [294.961, 54, 0],
              "to": [0, 45, 0],
              "ti": [0, -45, 0]
            },
            { "t": 239, "s": [294.961, 324, 0] }
          ],
          "ix": 2,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outBounce(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_mul($bm_mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outBounce(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outBounce(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outBounce(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outBounce(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "a": { "a": 0, "k": [0, -81, 0], "ix": 1 },
        "s": { "a": 0, "k": [119.677, 119.677, 119.677], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "AND FINALLY...",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [1, 1, 1]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 213,
      "op": 277,
      "st": 22,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 7,
      "ty": 5,
      "nm": "SECOND SLIDE 2",
      "sr": 1,
      "ks": {
        "o": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 198,
              "s": [100]
            },
            { "t": 218, "s": [0] }
          ],
          "ix": 11,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inExpo(t, b, c, d) {\n    return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 198,
              "s": [0]
            },
            { "t": 218, "s": [90] }
          ],
          "ix": 10,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inExpo(t, b, c, d) {\n    return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": { "a": 0, "k": [250, 524, 0], "ix": 2 },
        "a": { "a": 0, "k": [0, -81, 0], "ix": 1 },
        "s": { "a": 0, "k": [195.149, 195.149, 195.149], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "SECOND SLIDE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [1, 1, 1]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 197,
      "op": 266,
      "st": 6,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 8,
      "ty": 5,
      "nm": "THIS IS THE 6",
      "parent": 7,
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [360, 0, 0], "ix": 7 },
        "p": {
          "a": 1,
          "k": [
            {
              "i": { "x": 0.833, "y": 0.833 },
              "o": { "x": 0.167, "y": 0.167 },
              "t": 59,
              "s": [172.176, -136.342, 0],
              "to": [0, -0.512, 0],
              "ti": [-30.313, 0.512, 0]
            },
            {
              "i": { "x": 0.833, "y": 0.833 },
              "o": { "x": 0.167, "y": 0.167 },
              "t": 201,
              "s": [172.176, -139.417, 0],
              "to": [30.313, -0.512, 0],
              "ti": [-30.313, 0, 0]
            },
            { "t": 216, "s": [354.055, -139.417, 0] }
          ],
          "ix": 2,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inExpo(t, b, c, d) {\n    return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "a": { "a": 0, "k": [0, -81, 0], "ix": 1 },
        "s": { "a": 0, "k": [61.326, 61.326, 61.326], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "THIS IS THE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [0.006, 0.791, 0.8]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 197,
      "op": 269,
      "st": 6,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 9,
      "ty": 5,
      "nm": "SECOND SLIDE",
      "parent": 10,
      "sr": 1,
      "ks": {
        "o": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 129,
              "s": [100]
            },
            { "t": 135, "s": [100] }
          ],
          "ix": 11
        },
        "rx": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 129,
              "s": [-133]
            },
            { "t": 135, "s": [0] }
          ],
          "ix": 8,
          "x": "var $bm_rt;\nvar freq, decay, n, n, t, amp, w;\nfreq = 3;\ndecay = 5;\n$bm_rt = n = 0;\nif (numKeys > 0) {\n    $bm_rt = n = nearestKey(time).index;\n    if (key(n).time > time)\n        n--;\n}\nif (n > 0) {\n    t = $bm_sub(time, key(n).time);\n    amp = velocityAtTime($bm_sub(key(n).time, 0.001));\n    w = $bm_mul($bm_mul(freq, Math.PI), 2);\n    $bm_rt = $bm_sum(value, $bm_mul(amp, $bm_div($bm_div(Math.sin($bm_mul(t, w)), Math.exp($bm_mul(decay, t))), w)));\n} else\n    $bm_rt = value;"
        },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": { "a": 0, "k": [-280.755, 14.256, 0], "ix": 2 },
        "a": { "a": 0, "k": [0, -81, 0], "ix": 1 },
        "s": { "a": 0, "k": [163.063, 163.063, 163.063], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "SECOND SLIDE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [1, 1, 1]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 129,
      "op": 198,
      "st": -62,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 10,
      "ty": 5,
      "nm": "THIS IS THE 5",
      "sr": 1,
      "ks": {
        "o": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 126,
              "s": [0]
            },
            { "t": 132, "s": [100] }
          ],
          "ix": 11
        },
        "rx": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 126,
              "s": [90]
            },
            { "t": 132, "s": [0] }
          ],
          "ix": 8,
          "x": "var $bm_rt;\nvar freq, decay, n, n, t, amp, w;\nfreq = 3;\ndecay = 5;\n$bm_rt = n = 0;\nif (numKeys > 0) {\n    $bm_rt = n = nearestKey(time).index;\n    if (key(n).time > time)\n        n--;\n}\nif (n > 0) {\n    t = $bm_sub(time, key(n).time);\n    amp = velocityAtTime($bm_sub(key(n).time, 0.001));\n    w = $bm_mul($bm_mul(freq, Math.PI), 2);\n    $bm_rt = $bm_sum(value, $bm_mul(amp, $bm_div($bm_div(Math.sin($bm_mul(t, w)), Math.exp($bm_mul(decay, t))), w)));\n} else\n    $bm_rt = value;"
        },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": { "a": 0, "k": [586, 410, 0], "ix": 2 },
        "a": { "a": 0, "k": [0, -81, 0], "ix": 1 },
        "s": { "a": 0, "k": [119.677, 119.677, 119.677], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "THIS IS THE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [0.006, 0.791, 0.8]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 126,
      "op": 198,
      "st": -65,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 11,
      "ty": 4,
      "nm": "Shape Layer 2",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [960, 540, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [0, 0, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "shapes": [
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": 0.833, "y": 0.833 },
                    "o": { "x": 0.167, "y": 0.167 },
                    "t": 97,
                    "s": [
                      {
                        "i": [
                          [0, 0],
                          [0, 0]
                        ],
                        "o": [
                          [0, 0],
                          [0, 0]
                        ],
                        "v": [
                          [-694, 128],
                          [696, 128]
                        ],
                        "c": false
                      }
                    ]
                  },
                  {
                    "t": 125,
                    "s": [
                      {
                        "i": [
                          [0, 0],
                          [0, 0]
                        ],
                        "o": [
                          [0, 0],
                          [0, 0]
                        ],
                        "v": [
                          [694, 128],
                          [696, 128]
                        ],
                        "c": false
                      }
                    ]
                  }
                ],
                "ix": 2,
                "x": "var $bm_rt;\nfunction easeandwizz_inOutExpo(t, b, c, d) {\n    if (t == 0)\n        return b;\n    if (t == d)\n        return $bm_sum(b, c);\n    if ((t /= d / 2) < 1)\n        return $bm_sum($bm_mul($bm_div(c, 2), Math.pow(2, $bm_mul(10, $bm_sub(t, 1)))), b);\n    return $bm_sum($bm_mul($bm_div(c, 2), $bm_sum($bm_neg(Math.pow(2, $bm_mul(-10, --t))), 2)), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    if (n > 1 && n < numKeys - 1) {\n        return null;\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1.time;\n    eX = $bm_sub(key2.time, key1.time);\n    if (time < key1.time || time > key2.time) {\n        return null;\n    } else {\n        return valueAtTime(easeandwizz_inOutExpo(t, sX, eX, d));\n    }\n}\n$bm_rt = easeAndWizz() || value;"
              },
              "nm": "Path 1",
              "mn": "ADBE Vector Shape - Group",
              "hd": false
            },
            {
              "ty": "st",
              "c": { "a": 0, "k": [1, 1, 1, 1], "ix": 3 },
              "o": { "a": 0, "k": 100, "ix": 4 },
              "w": { "a": 0, "k": 15, "ix": 5 },
              "lc": 1,
              "lj": 1,
              "ml": 4,
              "bm": 0,
              "nm": "Stroke 1",
              "mn": "ADBE Vector Graphic - Stroke",
              "hd": false
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Shape 1",
          "np": 3,
          "cix": 2,
          "bm": 0,
          "ix": 1,
          "mn": "ADBE Vector Group",
          "hd": false
        }
      ],
      "ip": 97,
      "op": 125,
      "st": 11,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 12,
      "ty": 4,
      "nm": "Shape Layer 1",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [960, 540, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [0, 0, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "shapes": [
        {
          "ty": "gr",
          "it": [
            {
              "ind": 0,
              "ty": "sh",
              "ix": 1,
              "ks": {
                "a": 1,
                "k": [
                  {
                    "i": { "x": 0.833, "y": 0.833 },
                    "o": { "x": 0.167, "y": 0.167 },
                    "t": 58,
                    "s": [
                      {
                        "i": [
                          [0, 0],
                          [0, 0]
                        ],
                        "o": [
                          [0, 0],
                          [0, 0]
                        ],
                        "v": [
                          [-694, 128],
                          [-694, 128]
                        ],
                        "c": false
                      }
                    ]
                  },
                  {
                    "t": 70,
                    "s": [
                      {
                        "i": [
                          [0, 0],
                          [0, 0]
                        ],
                        "o": [
                          [0, 0],
                          [0, 0]
                        ],
                        "v": [
                          [-694, 128],
                          [696, 128]
                        ],
                        "c": false
                      }
                    ]
                  }
                ],
                "ix": 2,
                "x": "var $bm_rt;\nfunction easeandwizz_inOutExpo(t, b, c, d) {\n    if (t == 0)\n        return b;\n    if (t == d)\n        return $bm_sum(b, c);\n    if ((t /= d / 2) < 1)\n        return $bm_sum($bm_mul($bm_div(c, 2), Math.pow(2, $bm_mul(10, $bm_sub(t, 1)))), b);\n    return $bm_sum($bm_mul($bm_div(c, 2), $bm_sum($bm_neg(Math.pow(2, $bm_mul(-10, --t))), 2)), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    if (n > 1 && n < numKeys - 1) {\n        return null;\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1.time;\n    eX = $bm_sub(key2.time, key1.time);\n    if (time < key1.time || time > key2.time) {\n        return null;\n    } else {\n        return valueAtTime(easeandwizz_inOutExpo(t, sX, eX, d));\n    }\n}\n$bm_rt = easeAndWizz() || value;"
              },
              "nm": "Path 1",
              "mn": "ADBE Vector Shape - Group",
              "hd": false
            },
            {
              "ty": "st",
              "c": { "a": 0, "k": [1, 1, 1, 1], "ix": 3 },
              "o": { "a": 0, "k": 100, "ix": 4 },
              "w": { "a": 0, "k": 15, "ix": 5 },
              "lc": 1,
              "lj": 1,
              "ml": 4,
              "bm": 0,
              "nm": "Stroke 1",
              "mn": "ADBE Vector Graphic - Stroke",
              "hd": false
            },
            {
              "ty": "tr",
              "p": { "a": 0, "k": [0, 0], "ix": 2 },
              "a": { "a": 0, "k": [0, 0], "ix": 1 },
              "s": { "a": 0, "k": [100, 100], "ix": 3 },
              "r": { "a": 0, "k": 0, "ix": 6 },
              "o": { "a": 0, "k": 100, "ix": 7 },
              "sk": { "a": 0, "k": 0, "ix": 4 },
              "sa": { "a": 0, "k": 0, "ix": 5 },
              "nm": "Transform"
            }
          ],
          "nm": "Shape 1",
          "np": 3,
          "cix": 2,
          "bm": 0,
          "ix": 1,
          "mn": "ADBE Vector Group",
          "hd": false
        }
      ],
      "ip": 58,
      "op": 97,
      "st": -28,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 13,
      "ty": 5,
      "nm": "of the first slide 2",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": {
          "a": 1,
          "k": [
            {
              "i": { "x": 0.833, "y": 0.833 },
              "o": { "x": 0.167, "y": 0.167 },
              "t": 97,
              "s": [260, 534, 0],
              "to": [282.333, 0, 0],
              "ti": [-282.333, 0, 0]
            },
            { "t": 130, "s": [1954, 534, 0] }
          ],
          "ix": 2,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inOutExpo(t, b, c, d) {\n    if (t == 0)\n        return b;\n    if (t == d)\n        return $bm_sum(b, c);\n    if ((t /= d / 2) < 1)\n        return $bm_sum($bm_mul($bm_div(c, 2), Math.pow(2, $bm_mul(10, $bm_sub(t, 1)))), b);\n    return $bm_sum($bm_mul($bm_div(c, 2), $bm_sum($bm_neg(Math.pow(2, $bm_mul(-10, --t))), 2)), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inOutExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inOutExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inOutExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inOutExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "a": { "a": 0, "k": [0, -81, 0], "ix": 1 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "OF THE FIRST SLIDE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [0.988, 1, 0]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 97,
      "op": 164,
      "st": -28,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 14,
      "ty": 5,
      "nm": "of the first slide",
      "sr": 1,
      "ks": {
        "o": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 34,
              "s": [0]
            },
            { "t": 66, "s": [100] }
          ],
          "ix": 11,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inOutExpo(t, b, c, d) {\n    if (t == 0)\n        return b;\n    if (t == d)\n        return $bm_sum(b, c);\n    if ((t /= d / 2) < 1)\n        return $bm_sum($bm_mul($bm_div(c, 2), Math.pow(2, $bm_mul(10, $bm_sub(t, 1)))), b);\n    return $bm_sum($bm_mul($bm_div(c, 2), $bm_sum($bm_neg(Math.pow(2, $bm_mul(-10, --t))), 2)), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inOutExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inOutExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inOutExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inOutExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 34,
              "s": [112]
            },
            { "t": 66, "s": [0] }
          ],
          "ix": 10,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inOutExpo(t, b, c, d) {\n    if (t == 0)\n        return b;\n    if (t == d)\n        return $bm_sum(b, c);\n    if ((t /= d / 2) < 1)\n        return $bm_sum($bm_mul($bm_div(c, 2), Math.pow(2, $bm_mul(10, $bm_sub(t, 1)))), b);\n    return $bm_sum($bm_mul($bm_div(c, 2), $bm_sum($bm_neg(Math.pow(2, $bm_mul(-10, --t))), 2)), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inOutExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inOutExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inOutExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inOutExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": { "a": 0, "k": [260, 534, 0], "ix": 2 },
        "a": { "a": 0, "k": [0, -81, 0], "ix": 1 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "OF THE FIRST SLIDE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [0.988, 1, 0]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 34,
      "op": 98,
      "st": -91,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 15,
      "ty": 0,
      "nm": "spark_01",
      "refId": "comp_0",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": -30.579, "ix": 10 },
        "p": { "a": 0, "k": [1018, 427, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "w": 1920,
      "h": 1080,
      "ip": 15,
      "op": 22,
      "st": 15,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 16,
      "ty": 0,
      "nm": "spark_01",
      "refId": "comp_0",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": -180, "ix": 10 },
        "p": { "a": 0, "k": [122, 242, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "w": 1920,
      "h": 1080,
      "ip": 49,
      "op": 56,
      "st": 49,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 17,
      "ty": 0,
      "nm": "spark_01",
      "refId": "comp_0",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [960, 540, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "w": 1920,
      "h": 1080,
      "ip": 49,
      "op": 56,
      "st": 49,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 18,
      "ty": 0,
      "nm": "spark_01",
      "refId": "comp_0",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [960, 540, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "w": 1920,
      "h": 1080,
      "ip": 31,
      "op": 38,
      "st": 31,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 19,
      "ty": 0,
      "nm": "spark_01",
      "refId": "comp_0",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [960, 540, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "w": 1920,
      "h": 1080,
      "ip": 15,
      "op": 22,
      "st": 15,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 20,
      "ty": 5,
      "nm": "The first sentence 2",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": {
          "a": 1,
          "k": [
            {
              "i": { "x": 0.833, "y": 0.833 },
              "o": { "x": 0.167, "y": 0.167 },
              "t": 97,
              "s": [250, 518, 0],
              "to": [284.667, 0, 0],
              "ti": [-284.667, 0, 0]
            },
            { "t": 139, "s": [1958, 518, 0] }
          ],
          "ix": 2,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inOutExpo(t, b, c, d) {\n    if (t == 0)\n        return b;\n    if (t == d)\n        return $bm_sum(b, c);\n    if ((t /= d / 2) < 1)\n        return $bm_sum($bm_mul($bm_div(c, 2), Math.pow(2, $bm_mul(10, $bm_sub(t, 1)))), b);\n    return $bm_sum($bm_mul($bm_div(c, 2), $bm_sum($bm_neg(Math.pow(2, $bm_mul(-10, --t))), 2)), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inOutExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inOutExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inOutExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inOutExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "a": { "a": 0, "k": [0, 0, 0], "ix": 1 },
        "s": { "a": 0, "k": [131.131, 131.131, 131.131], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "THE FIRST SENTENCE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [1, 1, 1]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 97,
      "op": 164,
      "st": 97,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 21,
      "ty": 5,
      "nm": "The first sentence",
      "sr": 1,
      "ks": {
        "o": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 31,
              "s": [0]
            },
            { "t": 49, "s": [100] }
          ],
          "ix": 11,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inExpo(t, b, c, d) {\n    return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": {
          "a": 1,
          "k": [
            {
              "i": { "x": 0.833, "y": 0.833 },
              "o": { "x": 0.167, "y": 0.167 },
              "t": 31,
              "s": [250, 658, 0],
              "to": [0, -23.333, 0],
              "ti": [0, 23.333, 0]
            },
            { "t": 49, "s": [250, 518, 0] }
          ],
          "ix": 2,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inExpo(t, b, c, d) {\n    return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "a": { "a": 0, "k": [0, 0, 0], "ix": 1 },
        "s": { "a": 0, "k": [131.131, 131.131, 131.131], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "THE FIRST SENTENCE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [1, 1, 1]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 0,
      "op": 98,
      "st": -44,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 22,
      "ty": 5,
      "nm": "THIS IS THE 2",
      "sr": 1,
      "ks": {
        "o": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 6,
              "s": [0]
            },
            { "t": 47, "s": [100] }
          ],
          "ix": 11,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": -4,
              "s": [-57]
            },
            { "t": 47, "s": [0] }
          ],
          "ix": 10,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outBounce(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_mul($bm_mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outBounce(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outBounce(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outBounce(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outBounce(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": { "a": 0, "k": [250, 388, 0], "ix": 2 },
        "a": { "a": 0, "k": [0, 0, 0], "ix": 1 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "THIS IS THE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [0.988, 1, 0]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 0,
      "op": 49,
      "st": -28,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 23,
      "ty": 5,
      "nm": "THIS IS THE 3",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": {
          "a": 1,
          "k": [
            {
              "i": { "x": 0.833, "y": 0.833 },
              "o": { "x": 0.167, "y": 0.167 },
              "t": 50,
              "s": [250, 388, 0],
              "to": [0, -4.667, 0],
              "ti": [0, 4.667, 0]
            },
            { "t": 56, "s": [250, 360, 0] }
          ],
          "ix": 2,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outExpo(t, b, c, d) {\n    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "a": { "a": 0, "k": [0, 0, 0], "ix": 1 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "THIS IS THE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [0.988, 1, 0]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 49,
      "op": 57,
      "st": 49,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 24,
      "ty": 5,
      "nm": "THIS IS THE 4",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": {
          "a": 1,
          "k": [
            {
              "i": { "x": 0.833, "y": 0.833 },
              "o": { "x": 0.167, "y": 0.167 },
              "t": 97,
              "s": [250, 398, 0],
              "to": [285, 0, 0],
              "ti": [-285, 0, 0]
            },
            { "t": 143, "s": [1960, 398, 0] }
          ],
          "ix": 2,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inOutExpo(t, b, c, d) {\n    if (t == 0)\n        return b;\n    if (t == d)\n        return $bm_sum(b, c);\n    if ((t /= d / 2) < 1)\n        return $bm_sum($bm_mul($bm_div(c, 2), Math.pow(2, $bm_mul(10, $bm_sub(t, 1)))), b);\n    return $bm_sum($bm_mul($bm_div(c, 2), $bm_sum($bm_neg(Math.pow(2, $bm_mul(-10, --t))), 2)), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inOutExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inOutExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inOutExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inOutExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "a": { "a": 0, "k": [0, 0, 0], "ix": 1 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "THIS IS THE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [0.988, 1, 0]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 97,
      "op": 164,
      "st": 90,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 25,
      "ty": 5,
      "nm": "THIS IS THE",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "rx": { "a": 0, "k": 0, "ix": 8 },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": {
          "a": 1,
          "k": [
            {
              "i": { "x": 0.833, "y": 0.833 },
              "o": { "x": 0.167, "y": 0.167 },
              "t": 56,
              "s": [250, 360, 0],
              "to": [0, 6.333, 0],
              "ti": [0, -6.333, 0]
            },
            { "t": 78, "s": [250, 398, 0] }
          ],
          "ix": 2,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outBounce(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_mul($bm_mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outBounce(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outBounce(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outBounce(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outBounce(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "a": { "a": 0, "k": [0, 0, 0], "ix": 1 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6 }
      },
      "ao": 0,
      "t": {
        "d": {
          "k": [
            {
              "s": {
                "s": 111,
                "f": "UniSansHeavyCAPS",
                "t": "THIS IS THE",
                "ca": 1,
                "j": 0,
                "tr": 0,
                "lh": 133.2,
                "ls": 0,
                "fc": [0.988, 1, 0]
              },
              "t": 0
            }
          ]
        },
        "p": {},
        "m": { "g": 1, "a": { "a": 0, "k": [0, 0], "ix": 2 } },
        "a": []
      },
      "ip": 56,
      "op": 98,
      "st": 49,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 26,
      "ty": 1,
      "nm": "Cyan Solid 1",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "rx": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 117,
              "s": [0]
            },
            { "t": 163, "s": [-101.5] }
          ],
          "ix": 8,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_outBounce(t, b, c, d) {\n    if ((t /= d) < 1 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_mul($bm_mul(7.5625, t), t)), b);\n    } else if (t < 2 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 1.5 / 2.75), t), 0.75)), b);\n    } else if (t < 2.5 / 2.75) {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 2.25 / 2.75), t), 0.9375)), b);\n    } else {\n        return $bm_sum($bm_mul(c, $bm_sum($bm_mul($bm_mul(7.5625, t -= 2.625 / 2.75), t), 0.984375)), b);\n    }\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_outBounce(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_outBounce(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_outBounce(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_outBounce(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": { "a": 0, "k": [962.555, 1081.5, 0], "ix": 2 },
        "a": { "a": 0, "k": [960, 1080, 0], "ix": 1 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6 }
      },
      "ao": 0,
      "sw": 1920,
      "sh": 1080,
      "sc": "#00c2ce",
      "ip": 117,
      "op": 164,
      "st": 117,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 27,
      "ty": 1,
      "nm": "Yellow Solid 1",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": {
          "a": 1,
          "k": [
            {
              "i": { "x": 0.833, "y": 0.833 },
              "o": { "x": 0.167, "y": 0.167 },
              "t": 198,
              "s": [960, 539.5, 0],
              "to": [0, 180.667, 0],
              "ti": [0, -180.667, 0]
            },
            { "t": 218, "s": [960, 1623.5, 0] }
          ],
          "ix": 2,
          "l": 2,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inExpo(t, b, c, d) {\n    return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inExpo(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inExpo(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inExpo(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "sw": 1920,
      "sh": 1080,
      "sc": "#e9e100",
      "ip": 117,
      "op": 219,
      "st": 117,
      "bm": 0
    },
    {
      "ddd": 1,
      "ind": 28,
      "ty": 1,
      "nm": "Turquoise Solid 1",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "rx": {
          "a": 1,
          "k": [
            {
              "i": { "x": [0.833], "y": [0.833] },
              "o": { "x": [0.167], "y": [0.167] },
              "t": 276,
              "s": [0]
            },
            { "t": 310, "s": [90] }
          ],
          "ix": 8,
          "x": "var $bm_rt;\nvar p = 0.8;\nvar a = 50;\nvar s = 1.70158;\nfunction easeandwizz_inQuint(t, b, c, d) {\n    return $bm_sum($bm_mul($bm_mul($bm_mul($bm_mul($bm_mul(c, t /= d), t), t), t), t), b);\n}\nfunction easeAndWizz() {\n    var t, d, sX, eX, sY, eY, sZ, eZ, val1, val2, val2, val3;\n    var n = 0;\n    if (numKeys > 0) {\n        n = nearestKey(time).index;\n        if (key(n).time > time) {\n            n--;\n        }\n    }\n    try {\n        var key1 = key(n);\n        var key2 = key($bm_sum(n, 1));\n    } catch (e) {\n        return null;\n    }\n    var dim = 1;\n    try {\n        key(1)[1].length;\n        dim = 2;\n        key(1)[2].length;\n        dim = 3;\n    } catch (e) {\n    }\n    t = $bm_sub(time, key1.time);\n    d = $bm_sub(key2.time, key1.time);\n    sX = key1[0];\n    eX = $bm_sub(key2[0], key1[0]);\n    if (dim >= 2) {\n        sY = key1[1];\n        eY = $bm_sub(key2[1], key1[1]);\n        if (dim >= 3) {\n            sZ = key1[2];\n            eZ = $bm_sub(key2[2], key1[2]);\n        }\n    }\n    if (time < key1.time || time > key2.time) {\n        return value;\n    } else {\n        val1 = easeandwizz_inQuint(t, sX, eX, d, a, p, s);\n        switch (dim) {\n        case 1:\n            return val1;\n            break;\n        case 2:\n            val2 = easeandwizz_inQuint(t, sY, eY, d, a, p, s);\n            return [\n                val1,\n                val2\n            ];\n            break;\n        case 3:\n            val2 = easeandwizz_inQuint(t, sY, eY, d, a, p, s);\n            val3 = easeandwizz_inQuint(t, sZ, eZ, d, a, p, s);\n            return [\n                val1,\n                val2,\n                val3\n            ];\n            break;\n        default:\n            return null;\n        }\n    }\n}\n$bm_rt = easeAndWizz() || value;"
        },
        "ry": { "a": 0, "k": 0, "ix": 9 },
        "rz": { "a": 0, "k": 0, "ix": 10 },
        "or": { "a": 0, "k": [0, 0, 0], "ix": 7 },
        "p": { "a": 0, "k": [0, 539.5, 0], "ix": 2 },
        "a": { "a": 0, "k": [0, 540, 0], "ix": 1 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6 }
      },
      "ao": 0,
      "sw": 1920,
      "sh": 1080,
      "sc": "#00e96e",
      "ip": 276,
      "op": 314,
      "st": 195,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 29,
      "ty": 1,
      "nm": "Turquoise Solid 1",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [960, 539.5, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "sw": 1920,
      "sh": 1080,
      "sc": "#00e96e",
      "ip": 198,
      "op": 277,
      "st": 117,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 30,
      "ty": 1,
      "nm": "Cyan Solid 1",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [960, 539.5, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "sw": 1920,
      "sh": 1080,
      "sc": "#00c2ce",
      "ip": 276,
      "op": 314,
      "st": 276,
      "bm": 0
    },
    {
      "ddd": 0,
      "ind": 31,
      "ty": 1,
      "nm": "Cyan Solid 1",
      "sr": 1,
      "ks": {
        "o": { "a": 0, "k": 100, "ix": 11 },
        "r": { "a": 0, "k": 0, "ix": 10 },
        "p": { "a": 0, "k": [960, 539.5, 0], "ix": 2, "l": 2 },
        "a": { "a": 0, "k": [960, 540, 0], "ix": 1, "l": 2 },
        "s": { "a": 0, "k": [100, 100, 100], "ix": 6, "l": 2 }
      },
      "ao": 0,
      "sw": 1920,
      "sh": 1080,
      "sc": "#00c2ce",
      "ip": 0,
      "op": 118,
      "st": -28,
      "bm": 0
    }
  ],
  "markers": [],
  "chars": [
    {
      "ch": "T",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 58.5,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [57.504, -54.282],
                      [57.504, -71.402],
                      [1.41, -71.402],
                      [1.41, -54.282],
                      [20.343, -54.282],
                      [20.343, 0],
                      [38.571, 0],
                      [38.571, -54.282]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "T",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "T",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "H",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 67.6,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [23.767, -26.889],
                      [44.312, -26.889],
                      [44.312, 0],
                      [62.439, 0],
                      [62.439, -71.301],
                      [44.312, -71.301],
                      [44.312, -44.312],
                      [23.767, -44.312],
                      [23.767, -71.301],
                      [5.64, -71.301],
                      [5.64, 0],
                      [23.767, 0]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "H",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "H",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "I",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 29.1,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [23.666, -71.301],
                      [5.64, -71.301],
                      [5.64, 0],
                      [23.666, 0]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "I",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "I",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "S",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 56.4,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [-8.56, 0],
                      [-0.604, 13.797],
                      [12.689, 2.316],
                      [0.201, 3.424],
                      [-7.452, -7.956],
                      [0, 0],
                      [8.661, 0],
                      [0, -13.998],
                      [-11.481, -1.813],
                      [0.201, -4.028],
                      [7.15, 8.661]
                    ],
                    "o": [
                      [6.647, 8.56],
                      [13.092, 0],
                      [0.806, -17.523],
                      [-5.539, -1.208],
                      [0.302, -8.258],
                      [0, 0],
                      [-7.352, -8.963],
                      [-13.092, 0],
                      [0, 13.596],
                      [5.841, 0.806],
                      [-0.504, 7.654],
                      [0, 0]
                    ],
                    "v": [
                      [2.216, -11.884],
                      [26.486, 1.007],
                      [54.684, -20.343],
                      [30.112, -44.614],
                      [20.645, -51.26],
                      [41.19, -51.865],
                      [52.972, -60.928],
                      [28.601, -72.308],
                      [2.82, -50.958],
                      [24.774, -28.299],
                      [36.96, -21.149],
                      [13.596, -22.559]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "S",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "S",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": " ",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 18.2,
      "data": {},
      "fFamily": "Uni Sans"
    },
    {
      "ch": "E",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 58.8,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [23.868, -54.382],
                      [55.289, -54.382],
                      [55.289, -71.301],
                      [5.64, -71.301],
                      [5.64, 0],
                      [55.289, 0],
                      [55.289, -17.02],
                      [23.868, -17.02],
                      [23.868, -27.695],
                      [52.771, -27.695],
                      [52.771, -43.304],
                      [23.868, -43.304]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "E",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "E",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "F",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 57.6,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [23.868, -54.181],
                      [55.289, -54.181],
                      [55.289, -71.301],
                      [5.64, -71.301],
                      [5.64, 0],
                      [23.868, 0],
                      [23.868, -24.573],
                      [51.361, -24.573],
                      [51.361, -41.391],
                      [23.868, -41.391]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "F",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "F",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "R",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 64.6,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 13.193],
                      [14.703, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [8.661, -2.719],
                      [-0.403, -16.718],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [43.607, 0],
                      [66.064, 0],
                      [46.628, -24.472],
                      [60.626, -47.836],
                      [34.14, -71.301],
                      [5.64, -71.301],
                      [5.64, 0],
                      [23.868, 0],
                      [23.868, -22.659],
                      [27.09, -22.659]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "R",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              },
              {
                "ind": 1,
                "ty": "sh",
                "ix": 2,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [11.38, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [11.38, 0],
                      [0, 0]
                    ],
                    "v": [
                      [23.868, -38.168],
                      [23.868, -54.483],
                      [34.442, -54.483],
                      [34.442, -38.168]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "R",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "R",
            "np": 5,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "N",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 67.6,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [-0.101, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0.101, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [5.64, 0],
                      [23.666, 0],
                      [23.666, -28.5],
                      [21.35, -42.297],
                      [21.854, -42.398],
                      [28.098, -28.098],
                      [44.211, 0],
                      [62.439, 0],
                      [62.439, -71.301],
                      [44.513, -71.301],
                      [44.513, -38.974],
                      [46.527, -26.688],
                      [46.024, -26.587],
                      [39.981, -40.887],
                      [22.76, -71.301],
                      [5.64, -71.301]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "N",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "N",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "C",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 58.2,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 8.56],
                      [0, 0],
                      [-4.834, -8.862],
                      [0, 0],
                      [8.762, 0],
                      [0, -16.113],
                      [0, 0],
                      [-13.998, 0],
                      [-5.942, 11.581]
                    ],
                    "o": [
                      [-3.928, 9.869],
                      [0, 0],
                      [0, -8.862],
                      [0, 0],
                      [-5.74, -12.689],
                      [-14.301, 0],
                      [0, 0],
                      [0, 16.214],
                      [8.963, 0],
                      [0, 0]
                    ],
                    "v": [
                      [41.995, -22.256],
                      [21.954, -23.364],
                      [21.954, -47.937],
                      [42.7, -49.951],
                      [57.404, -55.893],
                      [32.327, -72.308],
                      [3.928, -47.937],
                      [3.928, -23.364],
                      [32.025, 1.007],
                      [57.706, -15.005]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "C",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "C",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "O",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 66.5,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [-14.804, 0],
                      [0, 16.315],
                      [0, 0],
                      [14.804, 0],
                      [0, -16.415]
                    ],
                    "o": [
                      [0, 16.315],
                      [14.804, 0],
                      [0, 0],
                      [0, -16.315],
                      [-14.804, 0],
                      [0, 0]
                    ],
                    "v": [
                      [3.928, -23.465],
                      [33.536, 1.007],
                      [63.043, -23.465],
                      [63.043, -47.836],
                      [33.435, -72.308],
                      [3.928, -47.836]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "O",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              },
              {
                "ind": 1,
                "ty": "sh",
                "ix": 2,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [-5.64, 0],
                      [0, -5.539],
                      [0, 0],
                      [5.74, 0],
                      [0, 5.237]
                    ],
                    "o": [
                      [0, -5.237],
                      [5.841, 0],
                      [0, 0],
                      [0, 5.136],
                      [-5.74, 0],
                      [0, 0]
                    ],
                    "v": [
                      [21.954, -47.836],
                      [33.234, -55.893],
                      [45.016, -47.836],
                      [45.016, -23.465],
                      [33.536, -15.71],
                      [21.954, -23.465]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "O",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "O",
            "np": 5,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "L",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 53.9,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [5.64, 0],
                      [52.771, 0],
                      [52.771, -17.825],
                      [23.767, -17.825],
                      [23.767, -71.301],
                      [5.64, -71.301]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "L",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "L",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "D",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 63.6,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 16.415],
                      [0, 0],
                      [14.301, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [14.301, 0.101],
                      [0, 0],
                      [0, -16.617],
                      [0, 0]
                    ],
                    "v": [
                      [5.64, -71.301],
                      [5.64, 0],
                      [32.327, 0],
                      [60.022, -23.465],
                      [60.022, -47.433],
                      [32.327, -71.301]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "D",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              },
              {
                "ind": 1,
                "ty": "sh",
                "ix": 2,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, -4.633],
                      [0, 0],
                      [6.143, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [6.042, 0],
                      [0, 0],
                      [0, 4.633],
                      [0, 0]
                    ],
                    "v": [
                      [23.767, -16.919],
                      [23.767, -54.483],
                      [32.932, -54.483],
                      [41.895, -46.93],
                      [41.895, -24.673],
                      [32.932, -16.919]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "D",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "D",
            "np": 5,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "A",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 64.8,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [40.686, -71.301],
                      [24.271, -71.301],
                      [-0.604, 0],
                      [18.732, 0],
                      [23.163, -14.301],
                      [42.197, -14.301],
                      [46.829, 0],
                      [66.165, 0]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "A",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              },
              {
                "ind": 1,
                "ty": "sh",
                "ix": 2,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [27.191, -30.313],
                      [32.428, -51.16],
                      [32.932, -51.16],
                      [37.866, -30.313]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "A",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "A",
            "np": 5,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": "Y",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 65.5,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "o": [
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0],
                      [0, 0]
                    ],
                    "v": [
                      [41.995, 0],
                      [41.995, -28.098],
                      [66.971, -71.301],
                      [45.822, -71.301],
                      [32.932, -45.117],
                      [20.041, -71.301],
                      [-0.906, -71.301],
                      [23.969, -28.098],
                      [23.969, 0]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": "Y",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": "Y",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    },
    {
      "ch": ".",
      "size": 111,
      "style": "Heavy CAPS",
      "w": 25.7,
      "data": {
        "shapes": [
          {
            "ty": "gr",
            "it": [
              {
                "ind": 0,
                "ty": "sh",
                "ix": 1,
                "ks": {
                  "a": 0,
                  "k": {
                    "i": [
                      [0, -5.539],
                      [-5.539, 0],
                      [0, 5.64],
                      [5.539, 0]
                    ],
                    "o": [
                      [0, 5.64],
                      [5.539, 0],
                      [0, -5.539],
                      [-5.539, 0]
                    ],
                    "v": [
                      [2.921, -9.567],
                      [12.891, 0.604],
                      [22.961, -9.567],
                      [12.891, -19.537]
                    ],
                    "c": true
                  },
                  "ix": 2
                },
                "nm": ".",
                "mn": "ADBE Vector Shape - Group",
                "hd": false
              }
            ],
            "nm": ".",
            "np": 3,
            "cix": 2,
            "bm": 0,
            "ix": 1,
            "mn": "ADBE Vector Group",
            "hd": false
          }
        ]
      },
      "fFamily": "Uni Sans"
    }
  ]
}
